const CONFIG = require('../config');
const logger = require('../utils/logger');

class MenuHandler {
    constructor() {}

    async handleMenuOption(sock, from, text, session) {
        switch (text) {
            case '1':
                session.state = 'units';
                await this.sendUnitsMenu(sock, from);
                break;
            case '2':
                await this.sendAllSchedules(sock, from);
                break;
            case '3':
                session.state = 'prices';
                await this.sendPricesMenu(sock, from);
                break;
            case '4':
                session.state = 'experimental_unit';
                const BookingHandler = require('./booking');
                const bookingHandler = new BookingHandler();
                await bookingHandler.sendExperimentalUnitSelection(sock, from);
                break;
            case '5':
                await this.sendPlatformsInfo(sock, from);
                break;
            case '6':
                await this.sendLocations(sock, from);
                break;
            case '7':
                await this.sendLevelsInfo(sock, from);
                break;
            case '8':
                session.state = 'faq';
                await this.sendFAQMenu(sock, from);
                break;
            case '9':
                await this.connectToAgent(sock, from);
                session.state = 'waiting_message';
                break;
            default:
                await sock.sendMessage(from, {
                    text: `‚ùå Op√ß√£o inv√°lida. Por favor, escolha uma op√ß√£o de 1 a 9.\n\n${CONFIG.menuPrincipal}`
                });
        }
    }

    async sendUnitsMenu(sock, from) {
        let message = `‚öΩ *NOSSAS UNIDADES CT LK FUTEV√îLEI* üèê\n\n`;
        
        CONFIG.unidades.forEach((unidade, index) => {
            message += `${index + 1}Ô∏è‚É£ *${unidade.nome}*\n   üìç ${unidade.local}\n\n`;
        });
        
        message += `Digite o n√∫mero da unidade para mais informa√ß√µes ou *MENU* para voltar.`;
        
        await sock.sendMessage(from, { text: message });
    }

    async handleUnitsOption(sock, from, text, session) {
        const unitIndex = parseInt(text) - 1;
        
        if (unitIndex >= 0 && unitIndex < CONFIG.unidades.length) {
            await this.sendUnitDetails(sock, from, unitIndex);
            session.state = 'menu';
        } else {
            await sock.sendMessage(from, {
                text: `‚ùå Op√ß√£o inv√°lida. Por favor, escolha 1 ou 2.`
            });
        }
    }

    async sendUnitDetails(sock, from, unitIndex) {
        const unidade = CONFIG.unidades[unitIndex];
        
        let message = `‚öΩ *${unidade.nome}* üèê\n\n`;
        message += `üìç *Endere√ßo:*\n${unidade.endereco}\n\n`;
        message += `üìÖ *Dias de Funcionamento:*\n${unidade.diasFuncionamento}\n\n`;
        message += `‚è∞ *Hor√°rios das Aulas:*\n`;
        unidade.horarios.forEach(h => message += `‚Ä¢ ${h}\n`);
        
        if (unidade.aulaoSabado) {
            message += `\nüéâ *Especial:* ${unidade.aulaoSabado}\n`;
        }
        
        message += `\nüí≥ *Formas de Pagamento:*\n`;
        message += `‚Ä¢ Wellhub (plano Silver+)\n‚Ä¢ TotalPass (plano TP2+)\n‚Ä¢ GuruPass (35 cr√©ditos)\n`;
        message += `‚Ä¢ Mensalidades e avulsas\n\n`;
        message += `Digite *3* para ver os valores ou *MENU* para voltar.`;
        
        await sock.sendMessage(from, { text: message });
    }

    async sendPricesMenu(sock, from) {
        let message = `üí∞ *VALORES E PLANOS* üí∞\n\n`;
        message += `Escolha a unidade:\n\n`;
        message += `1Ô∏è‚É£ Recreio\n`;
        message += `2Ô∏è‚É£ Calif√≥rnia (Bangu)\n`;
        message += `3Ô∏è‚É£ Ver todos os valores\n\n`;
        message += `Digite o n√∫mero ou *MENU* para voltar.`;
        
        await sock.sendMessage(from, { text: message });
    }

    async handlePricesOption(sock, from, text, session) {
        switch(text) {
            case '1':
                await this.sendUnitPrices(sock, from, 0);
                session.state = 'menu';
                break;
            case '2':
                await this.sendUnitPrices(sock, from, 1);
                session.state = 'menu';
                break;
            case '3':
                await this.sendAllPrices(sock, from);
                session.state = 'menu';
                break;
            default:
                await sock.sendMessage(from, {
                    text: `‚ùå Op√ß√£o inv√°lida. Escolha 1, 2 ou 3.`
                });
        }
    }

    async sendUnitPrices(sock, from, unitIndex) {
        const unidade = CONFIG.unidades[unitIndex];
        
        let message = `üí∞ *VALORES - ${unidade.nome}* üí∞\n\n`;
        message += `üìã *MENSALIDADES:*\n`;
        
        unidade.precos.mensalidade.forEach(plano => {
            message += `‚Ä¢ ${plano.frequencia}: ${plano.valor}\n`;
        });
        
        message += `\nüéæ *AULA AVULSA:* ${unidade.precos.avulsa}\n\n`;
        message += `‚úÖ *PLATAFORMAS ACEITAS:*\n`;
        message += `‚Ä¢ Wellhub/Gympass (plano Silver ou superior)\n`;
        message += `‚Ä¢ TotalPass (plano TP2 ou superior)\n`;
        message += `‚Ä¢ GuruPass (35 cr√©ditos por aula)\n`;
        
        message += `\nüí° *Dica:* A primeira aula experimental √© gratuita!\n\n`;
        message += `Digite *MENU* para voltar ao menu principal.`;
        
        await sock.sendMessage(from, { text: message });
    }

    async sendAllPrices(sock, from) {
        let message = `üí∞ *TABELA COMPLETA DE VALORES* üí∞\n`;
        
        CONFIG.unidades.forEach(unidade => {
            message += `\nüìç *${unidade.nome}*\n`;
            message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
            unidade.precos.mensalidade.forEach(plano => {
                message += `${plano.frequencia}: ${plano.valor}\n`;
            });
            message += `Avulsa: ${unidade.precos.avulsa}\n`;
        });
        
        message += `\n‚úÖ *Todas as unidades aceitam:*\n`;
        message += `‚Ä¢ Wellhub/Gympass (a partir do Silver)\n‚Ä¢ TotalPass (a partir do TP2)\n‚Ä¢ GuruPass (35 cr√©ditos)\n\n`;
        message += `Digite *MENU* para voltar.`;
        
        await sock.sendMessage(from, { text: message });
    }

    async sendAllSchedules(sock, from) {
        let message = `‚è∞ *HOR√ÅRIOS DAS AULAS* ‚è∞\n`;
        
        CONFIG.unidades.forEach(unidade => {
            message += `\nüìç *${unidade.nome}*\n`;
            message += `üìÖ ${unidade.diasFuncionamento}\n`;
            message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
            unidade.horarios.forEach(h => message += `${h}\n`);
            if (unidade.aulaoSabado) {
                message += `\n${unidade.aulaoSabado}\n`;
            }
        });
        
        message += `\nüí° Chegue 10 min antes do hor√°rio!\n\n`;
        message += `Digite *MENU* para voltar.`;
        
        await sock.sendMessage(from, { text: message });
    }

    async sendPlatformsInfo(sock, from) {
        const message = `üì± *PLATAFORMAS DE CHECK-IN* üì±\n\n` +
                       `Aceitamos as principais plataformas:\n\n` +
                       `1Ô∏è‚É£ *Wellhub (antigo Gympass)*\n` +
                       `‚Ä¢ ‚ö†Ô∏è Plano m√≠nimo: SILVER\n` +
                       `‚Ä¢ Check-in pelo app\n\n` +
                       `2Ô∏è‚É£ *TotalPass*\n` +
                       `‚Ä¢ ‚ö†Ô∏è Plano m√≠nimo: TP2\n` +
                       `‚Ä¢ Check-in pelo app\n\n` +
                       `3Ô∏è‚É£ *GuruPass*\n` +
                       `‚Ä¢ ‚ö†Ô∏è M√≠nimo: 35 CR√âDITOS\n` +
                       `‚Ä¢ Agendamento pelo app\n` +
                       `‚Ä¢ Confirme disponibilidade\n\n` +
                       `‚ö†Ô∏è *Importante:*\n` +
                       `Fa√ßa o check-in ANTES de entrar na quadra!\n\n` +
                       `Digite *MENU* para voltar.`;
        
        await sock.sendMessage(from, { text: message });
    }

    async sendLocations(sock, from) {
        const unidadeRecreio = CONFIG.unidades[0];
        const unidadeBangu = CONFIG.unidades[1];
        
        await sock.sendMessage(from, {
            text: `üìç *LOCALIZA√á√ÉO - RECREIO* üìç\n\n` +
                  `${unidadeRecreio.endereco}\n\n` +
                  `üó∫Ô∏è Google Maps:\n` +
                  `https://maps.google.com/?q=Praia+do+Recreio+Posto+11+Hotel+Atlantico+Sul`
        });
        
        await sock.sendMessage(from, {
            text: `üìç *LOCALIZA√á√ÉO - BANGU* üìç\n\n` +
                  `${unidadeBangu.endereco}\n\n` +
                  `üó∫Ô∏è Google Maps:\n` +
                  `https://maps.google.com/?q=Rua+Selene+de+Medeiros+112+Jardim+Bangu`
        });
        
        await sock.sendMessage(from, {
            text: `Digite *MENU* para voltar ao menu principal.`
        });
    }

   async sendLevelsInfo(sock, from) {
    const message = `üèê *N√çVEIS DAS TURMAS* ‚öΩ\n\n` +
                   `üü¢ *INICIANTE A*\n` +
                   `‚Ä¢ Introdu√ß√£o √† recep√ß√£o e movimenta√ß√£o\n` +
                   `‚Ä¢ Desenvolver posicionamento\n` +
                   `‚Ä¢ Aperfei√ßoamento de fundamentos\n\n` +
                   `üü¢ *INICIANTE B*\n` +
                   `‚Ä¢ Nunca jogou futev√¥lei\n` +
                   `‚Ä¢ Aprendizado dos fundamentos\n` +
                   `‚Ä¢ Familiariza√ß√£o com a areia\n` +
                   `‚Ä¢ Dom√≠nio de bola b√°sico\n\n` +
                   `üü° *INTERMEDI√ÅRIO*\n` +
                   `‚Ä¢ J√° domina passes e recep√ß√£o\n` +
                   `‚Ä¢ Desenvolvimento de ataques\n` +
                   `‚Ä¢ Aperfei√ßoamento t√©cnico\n` +
                   `‚Ä¢ Jogadas em dupla\n\n` +
                   `üî¥ *AVAN√áADO*\n` +
                   `‚Ä¢ Jogadores experientes\n` +
                   `‚Ä¢ Treino de alto rendimento\n` +
                   `‚Ä¢ Prepara√ß√£o para torneios\n\n` +
                   `üÜì *LIVRE*\n` +
                   `‚Ä¢ Todos os n√≠veis juntos\n` +
                   `‚Ä¢ Pr√°tica recreativa\n` +
                   `‚Ä¢ Jogos e pontos\n\n` +
                   `Digite *MENU* para voltar.`;
    
    await sock.sendMessage(from, { text: message });
}
    async sendFAQMenu(sock, from) {
        let message = `‚ùì *PERGUNTAS FREQUENTES* ‚ùì\n\n`;
        
        CONFIG.faq.forEach((item, index) => {
            message += `${index + 1}Ô∏è‚É£ ${item.pergunta}\n\n`;
        });
        
        message += `Digite o n√∫mero da pergunta ou *MENU* para voltar.`;
        
        await sock.sendMessage(from, { text: message });
    }

    async handleFAQOption(sock, from, text, session) {
        const faqIndex = parseInt(text) - 1;
        
        if (faqIndex >= 0 && faqIndex < CONFIG.faq.length) {
            const item = CONFIG.faq[faqIndex];
            
            await sock.sendMessage(from, {
                text: `‚ùì *${item.pergunta}*\n\n` +
                      `üí° ${item.resposta}\n\n` +
                      `Tem mais d√∫vidas? Digite *8* para ver outras perguntas ou *MENU* para voltar.`
            });
            session.state = 'menu';
        } else {
            await sock.sendMessage(from, {
                text: `‚ùå Op√ß√£o inv√°lida. Por favor, escolha uma pergunta v√°lida.`
            });
        }
    }

    async connectToAgent(sock, from) {
        const agora = new Date();
        const hora = agora.getHours();
        
        if (hora >= 6 && hora < 21) {
            await sock.sendMessage(from, {
                text: `Aguarde que um professor entrar√° em contato!\n\n` +
                      `üí¨ Assunto mais comum?\n` +
                      `‚Ä¢ Agendar experimental\n` +
                      `‚Ä¢ D√∫vida sobre mensalidade\n` +
                      `‚Ä¢ Remarcar aula\n` +
                      `‚Ä¢ Outros\n\n` +
                      `üí° *Dica:* Para usar o bot novamente, digite *MENU*`
            });
        } else {
            await sock.sendMessage(from, {
                text: `üò¥ *HOR√ÅRIO DE ATENDIMENTO* üò¥\n\n` +
                      `Nosso atendimento funciona das 6h √†s 21h.\n\n` +
                      `üì± Deixe sua mensagem diretamente neste chat!\n` +
                      `Responderemos assim que poss√≠vel.\n\n` +
                      `üí° *Dica:* Para usar o bot novamente, digite *MENU*`
            });
        }
        
        return 'menu';
    }
}

module.exports = MenuHandler;